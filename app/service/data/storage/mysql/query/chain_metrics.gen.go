// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"web3/app/service/data/storage/mysql/model"
)

func newChainMetric(db *gorm.DB, opts ...gen.DOOption) chainMetric {
	_chainMetric := chainMetric{}

	_chainMetric.chainMetricDo.UseDB(db, opts...)
	_chainMetric.chainMetricDo.UseModel(&model.ChainMetric{})

	tableName := _chainMetric.chainMetricDo.TableName()
	_chainMetric.ALL = field.NewAsterisk(tableName)
	_chainMetric.ChainUniqueID = field.NewInt64(tableName, "chain_unique_id")
	_chainMetric.LatestBlockNumber = field.NewInt64(tableName, "latest_block_number")
	_chainMetric.GasPrice = field.NewInt64(tableName, "gas_price")
	_chainMetric.TxTps = field.NewFloat64(tableName, "tx_tps")
	_chainMetric.TxTpd = field.NewFloat64(tableName, "tx_tpd")
	_chainMetric.CreatedAt = field.NewTime(tableName, "created_at")
	_chainMetric.UpdatedAt = field.NewTime(tableName, "updated_at")

	_chainMetric.fillFieldMap()

	return _chainMetric
}

type chainMetric struct {
	chainMetricDo chainMetricDo

	ALL               field.Asterisk
	ChainUniqueID     field.Int64
	LatestBlockNumber field.Int64
	GasPrice          field.Int64
	TxTps             field.Float64
	TxTpd             field.Float64
	CreatedAt         field.Time // Create Time
	UpdatedAt         field.Time // Update Time

	fieldMap map[string]field.Expr
}

func (c chainMetric) Table(newTableName string) *chainMetric {
	c.chainMetricDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chainMetric) As(alias string) *chainMetric {
	c.chainMetricDo.DO = *(c.chainMetricDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chainMetric) updateTableName(table string) *chainMetric {
	c.ALL = field.NewAsterisk(table)
	c.ChainUniqueID = field.NewInt64(table, "chain_unique_id")
	c.LatestBlockNumber = field.NewInt64(table, "latest_block_number")
	c.GasPrice = field.NewInt64(table, "gas_price")
	c.TxTps = field.NewFloat64(table, "tx_tps")
	c.TxTpd = field.NewFloat64(table, "tx_tpd")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *chainMetric) WithContext(ctx context.Context) *chainMetricDo {
	return c.chainMetricDo.WithContext(ctx)
}

func (c chainMetric) TableName() string { return c.chainMetricDo.TableName() }

func (c chainMetric) Alias() string { return c.chainMetricDo.Alias() }

func (c *chainMetric) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chainMetric) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["chain_unique_id"] = c.ChainUniqueID
	c.fieldMap["latest_block_number"] = c.LatestBlockNumber
	c.fieldMap["gas_price"] = c.GasPrice
	c.fieldMap["tx_tps"] = c.TxTps
	c.fieldMap["tx_tpd"] = c.TxTpd
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c chainMetric) clone(db *gorm.DB) chainMetric {
	c.chainMetricDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chainMetric) replaceDB(db *gorm.DB) chainMetric {
	c.chainMetricDo.ReplaceDB(db)
	return c
}

type chainMetricDo struct{ gen.DO }

func (c chainMetricDo) Debug() *chainMetricDo {
	return c.withDO(c.DO.Debug())
}

func (c chainMetricDo) WithContext(ctx context.Context) *chainMetricDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chainMetricDo) ReadDB() *chainMetricDo {
	return c.Clauses(dbresolver.Read)
}

func (c chainMetricDo) WriteDB() *chainMetricDo {
	return c.Clauses(dbresolver.Write)
}

func (c chainMetricDo) Session(config *gorm.Session) *chainMetricDo {
	return c.withDO(c.DO.Session(config))
}

func (c chainMetricDo) Clauses(conds ...clause.Expression) *chainMetricDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chainMetricDo) Returning(value interface{}, columns ...string) *chainMetricDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chainMetricDo) Not(conds ...gen.Condition) *chainMetricDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chainMetricDo) Or(conds ...gen.Condition) *chainMetricDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chainMetricDo) Select(conds ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chainMetricDo) Where(conds ...gen.Condition) *chainMetricDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chainMetricDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *chainMetricDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c chainMetricDo) Order(conds ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chainMetricDo) Distinct(cols ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chainMetricDo) Omit(cols ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chainMetricDo) Join(table schema.Tabler, on ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chainMetricDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chainMetricDo) RightJoin(table schema.Tabler, on ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chainMetricDo) Group(cols ...field.Expr) *chainMetricDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chainMetricDo) Having(conds ...gen.Condition) *chainMetricDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chainMetricDo) Limit(limit int) *chainMetricDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chainMetricDo) Offset(offset int) *chainMetricDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chainMetricDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chainMetricDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chainMetricDo) Unscoped() *chainMetricDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chainMetricDo) Create(values ...*model.ChainMetric) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chainMetricDo) CreateInBatches(values []*model.ChainMetric, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chainMetricDo) Save(values ...*model.ChainMetric) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chainMetricDo) First() (*model.ChainMetric, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainMetric), nil
	}
}

func (c chainMetricDo) Take() (*model.ChainMetric, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainMetric), nil
	}
}

func (c chainMetricDo) Last() (*model.ChainMetric, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainMetric), nil
	}
}

func (c chainMetricDo) Find() ([]*model.ChainMetric, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChainMetric), err
}

func (c chainMetricDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChainMetric, err error) {
	buf := make([]*model.ChainMetric, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chainMetricDo) FindInBatches(result *[]*model.ChainMetric, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chainMetricDo) Attrs(attrs ...field.AssignExpr) *chainMetricDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chainMetricDo) Assign(attrs ...field.AssignExpr) *chainMetricDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chainMetricDo) Joins(fields ...field.RelationField) *chainMetricDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chainMetricDo) Preload(fields ...field.RelationField) *chainMetricDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chainMetricDo) FirstOrInit() (*model.ChainMetric, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainMetric), nil
	}
}

func (c chainMetricDo) FirstOrCreate() (*model.ChainMetric, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainMetric), nil
	}
}

func (c chainMetricDo) FindByPage(offset int, limit int) (result []*model.ChainMetric, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chainMetricDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chainMetricDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chainMetricDo) Delete(models ...*model.ChainMetric) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chainMetricDo) withDO(do gen.Dao) *chainMetricDo {
	c.DO = *do.(*gen.DO)
	return c
}
