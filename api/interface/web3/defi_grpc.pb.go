// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: interface/web3/defi.proto

package web3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Defi_GetTokenPrice_FullMethodName = "/api.interface.web3.Defi/GetTokenPrice"
)

// DefiClient is the client API for Defi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefiClient interface {
	GetTokenPrice(ctx context.Context, in *GetTokenPriceRequest, opts ...grpc.CallOption) (*GetTokenPriceReply, error)
}

type defiClient struct {
	cc grpc.ClientConnInterface
}

func NewDefiClient(cc grpc.ClientConnInterface) DefiClient {
	return &defiClient{cc}
}

func (c *defiClient) GetTokenPrice(ctx context.Context, in *GetTokenPriceRequest, opts ...grpc.CallOption) (*GetTokenPriceReply, error) {
	out := new(GetTokenPriceReply)
	err := c.cc.Invoke(ctx, Defi_GetTokenPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefiServer is the server API for Defi service.
// All implementations must embed UnimplementedDefiServer
// for forward compatibility
type DefiServer interface {
	GetTokenPrice(context.Context, *GetTokenPriceRequest) (*GetTokenPriceReply, error)
	mustEmbedUnimplementedDefiServer()
}

// UnimplementedDefiServer must be embedded to have forward compatible implementations.
type UnimplementedDefiServer struct {
}

func (UnimplementedDefiServer) GetTokenPrice(context.Context, *GetTokenPriceRequest) (*GetTokenPriceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenPrice not implemented")
}
func (UnimplementedDefiServer) mustEmbedUnimplementedDefiServer() {}

// UnsafeDefiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefiServer will
// result in compilation errors.
type UnsafeDefiServer interface {
	mustEmbedUnimplementedDefiServer()
}

func RegisterDefiServer(s grpc.ServiceRegistrar, srv DefiServer) {
	s.RegisterService(&Defi_ServiceDesc, srv)
}

func _Defi_GetTokenPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefiServer).GetTokenPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Defi_GetTokenPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefiServer).GetTokenPrice(ctx, req.(*GetTokenPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Defi_ServiceDesc is the grpc.ServiceDesc for Defi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Defi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.interface.web3.Defi",
	HandlerType: (*DefiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokenPrice",
			Handler:    _Defi_GetTokenPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interface/web3/defi.proto",
}
